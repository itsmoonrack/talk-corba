package MTalk;


/**
* MTalk/_TalkStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from talk.idl
* mardi 4 janvier 2011 17 h 51 CET
*/

public class _TalkStub extends org.omg.CORBA.portable.ObjectImpl implements MTalk.Talk
{


  /**
  		 * @param numConvSideB : num√©ro que l'appelant donne √† la conversation vue de son c√}t√©
  		 * @param numConvSideA : num√©ro que l'appel√© a donn√© √† la conversation vue de son c√}t√©, lors de l'appel √† requestTalk
  		 * @param talkIor : Ior de l'objet talk cr√©√© par l'appelant pour g√©rer cette discussion
  		 *
  		 **/
  public void accept (short numConvSideB, short numConvSideA, String talkIor)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("accept", false);
                $out.write_ushort (numConvSideB);
                $out.write_ushort (numConvSideA);
                $out.write_string (talkIor);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                accept (numConvSideB, numConvSideA, talkIor        );
            } finally {
                _releaseReply ($in);
            }
  } // accept


  /**
  		 * @param numConvSideA : num√©ro que l'appel√© a donn√© √† la conversation vue de son c√}t√©, lors de l'appel √† requestTalk
  		 **/
  public void deny (short numConvSideA)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("deny", true);
                $out.write_ushort (numConvSideA);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                deny (numConvSideA        );
            } finally {
                _releaseReply ($in);
            }
  } // deny


  /**
  		 * @param numConvYourSide : num√©ro identifiant la conversation du c√}t√© de l'appel√©.
  		 * 							C'est √† dire : je t'envoie un message sur la conversation
  		 * 							√† laquelle tu as donn√© le num√©ro numConvYourSide.
  		 * @param message : message envoy√© de l'appelant √† l'appel√©. A priori, √† afficher √† l'utilisateur.
  		 **/
  public void talk (short numConvYourSide, String message)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("talk", true);
                $out.write_ushort (numConvYourSide);
                $out.write_string (message);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                talk (numConvYourSide, message        );
            } finally {
                _releaseReply ($in);
            }
  } // talk


  /**
  		 * @param numConvYourSide : num√©ro de la conversation vue du c√}t√© de l'appel√©
  		 **/
  public void stop (short numConvYourSide)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("stop", false);
                $out.write_ushort (numConvYourSide);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                stop (numConvYourSide        );
            } finally {
                _releaseReply ($in);
            }
  } // stop

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:MTalk/Talk:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.Object obj = org.omg.CORBA.ORB.init (args, props).string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     String str = org.omg.CORBA.ORB.init (args, props).object_to_string (this);
     s.writeUTF (str);
  }
} // class _TalkStub
