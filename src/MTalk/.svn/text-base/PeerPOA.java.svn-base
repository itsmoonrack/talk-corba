package MTalk;


/**
* MTalk/PeerPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from talk.idl
* mardi 4 janvier 2011 17 h 51 CET
*/

public abstract class PeerPOA extends org.omg.PortableServer.Servant
 implements MTalk.PeerOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("getInformations", new java.lang.Integer (0));
    _methods.put ("requestTalk", new java.lang.Integer (1));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // MTalk/Peer/getInformations
       {
         String $result = null;
         $result = this.getInformations ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }


  /**
  		 * @param numConvSideA : le num√©ro que l'appelant donne √† la conversation vue de son c√}t√©.
  		 * @param subject : sujet de la conversation
  		 * @param myInformations : informations de l'appelant (username ou autre)
  		 * @param mytalkIor : Ior du talk que l'appelant cr√©e pour la conversation (de son c√}t√© donc)
  		 **/
       case 1:  // MTalk/Peer/requestTalk
       {
         short numConvSideA = in.read_ushort ();
         String subject = in.read_string ();
         String myInformations = in.read_string ();
         String mytalkIor = in.read_string ();
         this.requestTalk (numConvSideA, subject, myInformations, mytalkIor);
         out = $rh.createReply();
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:MTalk/Peer:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public Peer _this() 
  {
    return PeerHelper.narrow(
    super._this_object());
  }

  public Peer _this(org.omg.CORBA.ORB orb) 
  {
    return PeerHelper.narrow(
    super._this_object(orb));
  }


} // class PeerPOA
