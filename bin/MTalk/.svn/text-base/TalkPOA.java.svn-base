package MTalk;


/**
* MTalk/TalkPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from talk.idl
* mardi 4 janvier 2011 17 h 51 CET
*/

public abstract class TalkPOA extends org.omg.PortableServer.Servant
 implements MTalk.TalkOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("accept", new java.lang.Integer (0));
    _methods.put ("deny", new java.lang.Integer (1));
    _methods.put ("talk", new java.lang.Integer (2));
    _methods.put ("stop", new java.lang.Integer (3));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  /**
  		 * @param numConvSideB : num√©ro que l'appelant donne √† la conversation vue de son c√}t√©
  		 * @param numConvSideA : num√©ro que l'appel√© a donn√© √† la conversation vue de son c√}t√©, lors de l'appel √† requestTalk
  		 * @param talkIor : Ior de l'objet talk cr√©√© par l'appelant pour g√©rer cette discussion
  		 *
  		 **/
       case 0:  // MTalk/Talk/accept
       {
         short numConvSideB = in.read_ushort ();
         short numConvSideA = in.read_ushort ();
         String talkIor = in.read_string ();
         this.accept (numConvSideB, numConvSideA, talkIor);
         out = $rh.createReply();
         break;
       }


  /**
  		 * @param numConvSideA : num√©ro que l'appel√© a donn√© √† la conversation vue de son c√}t√©, lors de l'appel √† requestTalk
  		 **/
       case 1:  // MTalk/Talk/deny
       {
         short numConvSideA = in.read_ushort ();
         this.deny (numConvSideA);
         out = $rh.createReply();
         break;
       }


  /**
  		 * @param numConvYourSide : num√©ro identifiant la conversation du c√}t√© de l'appel√©.
  		 * 							C'est √† dire : je t'envoie un message sur la conversation
  		 * 							√† laquelle tu as donn√© le num√©ro numConvYourSide.
  		 * @param message : message envoy√© de l'appelant √† l'appel√©. A priori, √† afficher √† l'utilisateur.
  		 **/
       case 2:  // MTalk/Talk/talk
       {
         short numConvYourSide = in.read_ushort ();
         String message = in.read_string ();
         this.talk (numConvYourSide, message);
         out = $rh.createReply();
         break;
       }


  /**
  		 * @param numConvYourSide : num√©ro de la conversation vue du c√}t√© de l'appel√©
  		 **/
       case 3:  // MTalk/Talk/stop
       {
         short numConvYourSide = in.read_ushort ();
         this.stop (numConvYourSide);
         out = $rh.createReply();
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:MTalk/Talk:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public Talk _this() 
  {
    return TalkHelper.narrow(
    super._this_object());
  }

  public Talk _this(org.omg.CORBA.ORB orb) 
  {
    return TalkHelper.narrow(
    super._this_object(orb));
  }


} // class TalkPOA
